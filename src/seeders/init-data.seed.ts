// src/seeds/init-data.seeder.ts
import { Seeder } from '@mikro-orm/seeder';
import { EntityManager } from '@mikro-orm/core';

import { Locations } from '@modules/algorithm-input/location/entities/locations.entity';
import { Role } from '@modules/identity/roles-permissions/entities/role.entity';
import { Permission } from '@modules/identity/roles-permissions/entities/permission.entity';
import { User } from '@modules/identity/users/entities/user.entity';
import { Department } from '@modules/core-data/departments/entities/department.entity';
import { Classes } from '@modules/core-data/classes/entities/class.entity';
import { Lecturer } from '@modules/core-data/lecturer/entities/lecturer.entity';
import { Student } from '@modules/core-data/students/entities/student.entity';
import { Course } from '@modules/algorithm-input/course/entities/course.entity';
import { ExamSession } from '@modules/algorithm-input/exam-session/entities/exam-session.entity';
import { StudentCourseRegistration } from '@modules/algorithm-input/student-course-registration/entities/student-course-registration.entity';
import { ExamGroup } from '@modules/algorithm-input/exam-group/entities/exam-group.entity';
import { StudentExamGroup } from '@modules/algorithm-input/student-exam-group/entities/student-exam-group.entity';
import { Room } from '@modules/algorithm-input/room/entities/room.entity';
import { ExamSlot } from '@modules/result/exam-slot/entities/exam-slot.entity';
import { Exam } from '@modules/result/exam/entities/exam.entity';
import { ExamRegistration } from '@modules/result/exam-registration/entities/exam-registration.entity';
import { ExamSupervisor } from '@modules/result/exam-supervisor/entities/exam-supervisor.entity';

// C√°c Seeder con
import { PermissionSeeder } from './permission.seeder';
import { LocationSeeder } from './location.seeder';
import { LecturerSeeder } from './lecturer.seeder';
import { StudentSeeder } from './student.seeder';
import { DepartmentSeeder } from './department.seeder';
import { ClassSeeder } from './class.seeder';
import { RoomSeeder } from './room.seed';
import { UserAdminSeeder } from './user-admin.seeder';

export class InitSeeder extends Seeder {
  async run(em: EntityManager): Promise<void> {
    console.log('üå± B·∫Øt ƒë·∫ßu seed d·ªØ li·ªáu m·∫´u...');

    await this.call(em, [UserAdminSeeder]);
    // 1Ô∏è‚É£ Role & Permission
    await this.call(em, [PermissionSeeder]);
    console.log('‚úÖ ƒê√£ seed Role & Permission');

    // 2Ô∏è‚É£ Location
    await this.call(em, [LocationSeeder]);
    const location = await em.findOneOrFail(Locations, { code: 'CS001' });
    console.log('‚úÖ ƒê√£ seed Location:', location.name);

    // 3Ô∏è‚É£ Department
    await this.call(em, [DepartmentSeeder]);
    const department = await em.findOneOrFail(Department, {
      departmentCode: 'CNTT',
    });
    console.log('‚úÖ ƒê√£ seed Department:', department.departmentName);

    // 4Ô∏è‚É£ Class
    await this.call(em, [ClassSeeder]);
    const classEntity = await em.findOneOrFail(Classes, {
      classCode: 'CNTT01',
    });
    console.log('‚úÖ ƒê√£ seed Class:', classEntity.className);

    // 5Ô∏è‚É£ Lecturer
    await this.call(em, [LecturerSeeder]);
    const lecturer = await em.findOneOrFail(Lecturer, {
      lecturerCode: 'GV001',
    });
    console.log('‚úÖ ƒê√£ seed Lecturer:');

    // 6Ô∏è‚É£ Student
    await this.call(em, [StudentSeeder]);
    const student = await em.findOneOrFail(Student, { studentCode: 'SV001' });
    console.log('‚úÖ ƒê√£ seed Student:');

    // 7Ô∏è‚É£ Room
    await this.call(em, [RoomSeeder]);
    const room = await em.findOneOrFail(Room, { code: 'P101' });
    console.log('‚úÖ ƒê√£ seed Room:');

    // 8Ô∏è‚É£ Course
    const course = em.create(Course, {
      codeCourse: 'CT101',
      nameCourse: 'Nh·∫≠p m√¥n C√¥ng ngh·ªá Th√¥ng tin',
      description: 'Gi·ªõi thi·ªáu c√°c kh√°i ni·ªám c∆° b·∫£n v·ªÅ CNTT',
      credits: 3,
      expected_students: 100,
      is_active: true,
    });
    await em.persistAndFlush(course);
    console.log('‚úÖ ƒê√£ seed Course:', course.nameCourse);

    // 9Ô∏è‚É£ Exam Session
    const examSession = em.create(ExamSession, {
      name: 'H·ªçc k·ª≥ 1 - 2025',
      start_date: new Date('2025-12-01'),
      end_date: new Date('2025-12-31'),
      is_active: true,
      description: 'ƒê·ª£t thi cu·ªëi h·ªçc k·ª≥ 1 nƒÉm h·ªçc 2025-2026',
      location,
    });
    await em.persistAndFlush(examSession);
    console.log('‚úÖ ƒê√£ seed ExamSession:', examSession.name);

    // üîü StudentCourseRegistration
    const scr = em.create(StudentCourseRegistration, {
      student,
      course,
      examSession,
      is_active: true,
    });
    await em.persistAndFlush(scr);
    console.log('‚úÖ ƒê√£ seed StudentCourseRegistration');

    // 11Ô∏è‚É£ Exam Group
    const examGroup = em.create(ExamGroup, {
      code: 'EG001',
      expected_student_count: 50,
      status: 'not_scheduled',
      course,
      examSession,
    });
    await em.persistAndFlush(examGroup);
    console.log('‚úÖ ƒê√£ seed ExamGroup:', examGroup.code);

    // 12Ô∏è‚É£ StudentExamGroup
    const seg = em.create(StudentExamGroup, {
      student,
      examGroup,
      is_active: true,
    });
    await em.persistAndFlush(seg);
    console.log('‚úÖ ƒê√£ seed StudentExamGroup');

    // 13Ô∏è‚É£ Exam Slot
    const slot = em.create(ExamSlot, {
      slotName: 'Ca 1',
      startTime: '08:00',
      endTime: '10:00',
      description: 'Ca thi bu·ªïi s√°ng',
    });
    await em.persistAndFlush(slot);
    console.log('‚úÖ ƒê√£ seed ExamSlot:', slot.slotName);

    // 14Ô∏è‚É£ Exam
    const exam = em.create(Exam, {
      examGroup,
      room,
      examSlot: slot,
      examDate: new Date('2025-12-15'),
      duration: 120,
      status: 'D·ª∞_TH·∫¢O',
    });
    await em.persistAndFlush(exam);
    console.log('‚úÖ ƒê√£ seed Exam:', exam.id);

    // 15Ô∏è‚É£ ExamRegistration
    const examReg = em.create(ExamRegistration, {
      exam,
      student,
    });
    await em.persistAndFlush(examReg);
    console.log('‚úÖ ƒê√£ seed ExamRegistration');

    // 16Ô∏è‚É£ ExamSupervisor
    const examSup = em.create(ExamSupervisor, {
      exam,
      lecturer,
      role: 'CHINH',
    });
    await em.persistAndFlush(examSup);
    console.log('‚úÖ ƒê√£ seed ExamSupervisor');

    console.log('üéâ Seed d·ªØ li·ªáu ho√†n t·∫•t!');
  }
}
